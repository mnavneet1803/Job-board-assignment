// import findBlockQuotes from './converter-utilities/blockquotes'; 
const findBlockQuotes = require("./converter-utilities/blockquotes")
// import setCodeType from './converter-utilities/code-blocks'; 
const setCodeType = require("./converter-utilities/code-blocks")
// import {getParagraphs, convertToObject} from './converter-utilities/deassembling'; 
const {getParagraphs, convertToObject} = require("./converter-utilities/deassembling")
// import convertText from './converter-utilities/inline-elements'; 
// import findLineBreaks from './converter-utilities/line-breaks'; 
// import convertLinks from './converter-utilities/links'; 
// import {findListIndexes, markListItems, findOrderedListItems} from './converter-utilities/lists'; 
// import {addContainerDivs, combineText} from './converter-utilities/reassembling'; 

const convertText = require('./converter-utilities/inline-elements'); 
const findLineBreaks = require('./converter-utilities/line-breaks'); 
const convertLinks = require('./converter-utilities/links'); 
const {findListIndexes, markListItems, findOrderedListItems} = require('./converter-utilities/lists'); 
const {addContainerDivs, combineText} = require('./converter-utilities/reassembling'); 
exports.convertToHTML = function convertToHTML(markdownText){

	let paragraphs = getParagraphs(markdownText); 

	let paragraphObjects = paragraphs.map(paragraph => convertToObject(paragraph));

	paragraphObjects = setCodeType.setCodeType(paragraphObjects);
	paragraphObjects = findLineBreaks.findLineBreaks(paragraphObjects);
	paragraphObjects = findBlockQuotes.findBlockQuotes(paragraphObjects);

	let indexes = findListIndexes(paragraphObjects);
	paragraphObjects = markListItems(paragraphObjects, indexes);
	paragraphObjects = findOrderedListItems(paragraphObjects);

	paragraphObjects = convertLinks.convertLinks(paragraphObjects);

	paragraphObjects = paragraphObjects.map(paragraph => {
		return {
			type: paragraph.type,
			content: convertText.convertText(paragraph.content + " ").trim()  // this hack is needed because if not styling at the end of a paragraph will not be counted 
		} 
	}); 

	paragraphObjects = addContainerDivs(paragraphObjects);
	let arrayOfHTML = combineText(paragraphObjects); 

	return arrayOfHTML.join("\n"); 
}